module program;
import "mod2.ace";

let teststr = "sup"
let num: Int = 4 // legal
//let myint: Int = 4 + 22.5; // illegal
print("num = ", num)
print("num * 23 = ", num * 23)

testmodule.printstr(teststr)
//teststr.testmodule.printstr() // invalid; no member named 'testmodule'. add 'use testmodule'

func println(obj) : Any {
    print (obj);
}

"hi, this is a test of calling a function on a string literal".println()

let float_bitwise = 3;
float_bitwise.println()

print("testmodule.y = ", testmodule.y)

func blah (arg1) : String {
    print ("arg1 = ", arg1)
    func inner (a, b) : Int {
        print ("(inner) a = ", a, "    b = ", b)
    }
    inner ("sup", arg1)
}

blah ("hello world")

print ("true as string == ", true)

let abc = null
if abc == null {
    print ("abc == null")
}

print ("abc = 1 == ", abc = 1)

if abc {
    print ("abc")
} else {
    print ("abc did not evaluate to true. value of abc = ", abc)
}

type Customer {
    let id: Int;
    let name: String;
}

let cust: Customer;
cust;
let cust2: Customer;
cust2;
let otherType: testmodule.othertype;

//cust.tostring();   //== Customer.tostring(p);

let x = null
print ("x == ", x)
x = "blarg"
print ("x == ", x)

try {
  print ("try-block")
  print ("try to crash")

  let a=1;
  let b=9;
  print ("a + b = ", a + b)
} catch {
  print ("catch-block")
}
