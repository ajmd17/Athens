module loop {
	docall: Function = (fun: Function) {
		lol: Function = (arg1) {
			print "in lol() arg1 == ", arg1
		}
	
		fun(lol)
	}
	
	type MyGeneric <T, J> {
		name: T
		sayhi = () {
			print "hi!!!"
		}
	}
	
	
	type Range<T> {
		start : T
		end   : T
		lol   : Int
		
		fun = (self) {
			t: T
			print "t == ", t
			print "Hi"
		}
	}
	
	range: Range<Int>
	range.start = 50
	range.end   = 1000
	
	range.fun()
	
	forloop : Function = (the_range: Range<Any>) {
		start := the_range.start
		end := the_range.end
		
		print 'end - start == ', end - start
	}

	forloop(range)
	
	myobj: MyGeneric<Int, String>
	
	print 'myobj == ', myobj
	print 'myobj.j == ', myobj.name
	myobj.sayhi()
	
	docall((arg1: Function) {
		print "arg1 == ", arg1
		print "hello"
	})
	
	meow: String = docall.to_string()
	print "meow == ", meow
	
	foreach_range: Function = (range, callback: Function) {
		start := range.start
		end := range.end
		increment := 1
		
		if start > end {
			increment = -1
		}
		
		while start != end {
			callback(start)
			start += increment
		}
	}
}
