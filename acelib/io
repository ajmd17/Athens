module io {
    // file
    open: Any
    write: Any
    close: Any
    
    stdout: Any

    type FileStream {
        filepath: String
        file_obj: Any

        open: Function = (self, filepath: String, write_mode: String) {
            self.filepath = filepath
            self.file_obj = io::open(filepath, write_mode)
            return self
        }

        close: Function = (self) {
            if self.file_obj == null {
                return null
            }

            io::close(self.file_obj)
        }

        write: Function = (self, args...) {
            if self.file_obj == null {
                return null
            }

            let i = 0
            let len = ::length(args)
            
            while i < len {
                io::write(self.file_obj, ::to_string(args[i]))
                i += 1
            }
            
            return self
        }
    }
    
    module _Detail_ {
        lib: Any = runtime::load_library('lib/libace-runtime.dylib')

        // file
        io::open = runtime::load_function(lib,'io_open')
        io::write = runtime::load_function(lib,'io_write')
        io::close = runtime::load_function(lib, 'io_close')

        io::stdout = ::call(runtime::load_function(lib, 'io_get_stdout'))
    }
}