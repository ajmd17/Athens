generic TypeOf <X> : String = () {
  const ct_type = $meta::query("inspect_type", X);

  if ct_type == "Any" || ct_type == "Number" {
    return runtime::typeof(X);
  }

  return ct_type;
}();

generic Number <X> : Bool = TypeOf<X> == "Int" || TypeOf<X> == "Float";
generic Callable <X> : Bool = TypeOf<X> == "Function" || X has "$invoke";
generic Container <X> : Bool = TypeOf<X> == "Array";

/*

// maybe types could "implement" traits, which would just be a compile-time
// assertion to check if the type passes...

// e.g

type LinkedList : Container {
  // ...
}

*/